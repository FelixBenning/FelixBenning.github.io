<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maths on Felix' Blog</title><link>https://felixbenning.github.io/tags/maths/</link><description>Recent content in maths on Felix' Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 03 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://felixbenning.github.io/tags/maths/index.xml" rel="self" type="application/rss+xml"/><item><title>Intuitive Indexing</title><link>https://felixbenning.github.io/blog/programming/intuitive-indexing/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://felixbenning.github.io/blog/programming/intuitive-indexing/</guid><description>&lt;p>While most programming languages use 0-based indexing. &lt;a href="https://hisham.hm/2021/01/18/again-on-0-based-vs-1-based-indexing/" target="_blank">Some people are not
convinced&lt;/a> that this is a good thing and not just the legacy of
the language C. They argue that starting to index with one is more &lt;em>intuitive&lt;/em>
than starting to index with zero, and that there is no good reason to use
0-based indices besides pointer arithmetic which should not be of concern to
higher level programming.&lt;/p>
&lt;p>And to be fair, proponents of zero based indexing have mostly failed to provide
a convincing argument for their preference (&lt;a href="#5-ranges">Dijkstra&amp;rsquo;s range
argument&lt;/a> aside). To remedy this, I am going to present 5 arguments
for 0-based indexing and address the intuition argument of 1-based
indexing.&lt;/p></description></item><item><title>Zero vs One-based Indexing</title><link>https://felixbenning.github.io/blog/programming/0_vs_1_based_indexing/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://felixbenning.github.io/blog/programming/0_vs_1_based_indexing/</guid><description>&lt;h2 id="it-is-only-about-pointers">&amp;ldquo;It is only about pointers&amp;rdquo;&lt;/h2>
&lt;p>Proponents of counting from 1 often think that this is about pointers and
claim that it only makes sense for computer scientist as accessing an element
from an array on hardware translates to addition to the pointer which means
that the first element is at 0. They then like to argue that an index from 1
would make more sense in maths and &amp;ldquo;for counting&amp;rdquo;.&lt;/p>
&lt;p>I will try to explain why this is not the case.&lt;/p></description></item></channel></rss>